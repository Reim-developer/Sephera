{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sephera","text":"<p>Blazingly fast CLI analyzer for your codebase.</p> <p></p>"},{"location":"#why-sephera","title":"Why Sephera?","text":"<ul> <li>\ud83d\ude80 700k+ lines counted in ~1s</li> <li>\ud83d\udd0e Analyze LOC, stats, directory structure</li> <li>\ud83d\udce6 Zero dependencies \u2013 just run</li> <li>\ud83e\udde0 Regex ignore, language detection, JSON export</li> <li>\ud83c\udfaf Scan huge codebases like <code>~/</code> in seconds</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>sephera loc --ignore \"*.py\" # Ignore all Python files.\nsephera loc --json # Export to JSON.\n</code></pre>"},{"location":"pages/advanced_usage/","title":"Customize via YAML","text":""},{"location":"pages/advanced_usage/#introduction","title":"Introduction","text":"<ul> <li> <p>Sephera offers maximum customization and supports an unlimited number of programming languages for detection and LOC counting. Below is a basic guide on how to configure it.</p> </li> <li> <p>First, use the following command to create the configuration for your project:</p> </li> </ul> <pre><code>sephera cfg-language\n</code></pre> <ul> <li>This command will generate the SepheraCfg.yml file, including its basic syntax. You will find the SepheraCfg.yml file with the following content:</li> </ul> <pre><code># Auto generate by Sephera\n# GitHub: https://github.com/reim-developer/Sephera\n\n# Comment style for your programming language.\ncomment_styles:\n    python_style:\n        # Comment of language. If the language \n        # does not support it comment type,\n        # you can set this field to null.\n\n        single_line: '#' \n        multi_line_start: '\"\\\"\\\"\\'\n        multi_line_end: '\"\\\"\\\"\\'\n\n# Languages extension, and style\nlanguages:\n    # Language name.\n    - name: Python\n\n      # Language extension.\n      extension:\n        - .py\n\n      # Language comment style.\n      comment_styles: python_style\n</code></pre> <ul> <li> <p>Explanation of the values: <code>comment_styles:</code></p> <p><code>python_style:</code> This is the name of the style, and you can customize it as you like. However, it\u2019s recommended to give it a descriptive name that is easy to understand.</p> </li> </ul> <ul> <li> <p>This section defines how comments are handled for a programming language. It includes 3 fields:</p> <p><code>single_line:</code> This is where you define the syntax for single-line comments. For example, in the default configuration for Python, it is #. If the language doesn't support single-line comments, just assign a null value, like so: <code>single_line: null</code></p> <p><code>multi_line_start and multi_line_end:</code> These fields define the syntax for multi-line comments. For example, for languages like C, it would be <code>/*</code> and <code>*/</code>. </p> <p>If the language doesn't have multi-line comments, simply assign null values to both fields, like so:</p> <p><code>multi_line_start: null</code></p> <p><code>multi_line_end: null</code></p> </li> </ul> <ul> <li> <p>Explanation of values <code>languages</code>:</p> <p><code>name:</code> This is where you define the name of the programming language, such as \"Python\".</p> <p><code>extension:</code> Here, you list the file extensions that are associated with the language. For example, Python files have the .py extension.</p> <p><code>comment_styles:</code> This links to the comment style defined earlier in the configuration (in this case, python_style). This tells the tool which comment syntax to use for the language.</p> </li> </ul>"},{"location":"pages/install/","title":"Sephera Install","text":""},{"location":"pages/install/#manual-installation","title":"Manual installation:","text":"<p>Install via Github page:</p> <ul> <li>Sephera can be install lastest verson in Github release page.</li> <li>You just download the binary of your operating system, and run it. No setup requirements. But add Sephera to your PATH environment is recommended to use everywhere. <p>This install method is recommended for new users.</p> </li> </ul>"},{"location":"pages/install/#advanced-installation","title":"Advanced installation:","text":"<p>Install via cURL or wget (Linux/macOS):</p> <ul> <li>With <code>cURl</code>, put this command to your terminal:</li> </ul> <pre><code>curl -sSL https://raw.githubusercontent.com/Reim-developer/Sephera/master/install.sh | bash\n</code></pre> <ul> <li>With <code>wget</code>, put this command to your terminal</li> </ul> <pre><code>wget -qO- https://raw.githubusercontent.com/Reim-developer/Sephera/master/install.sh | bash\n</code></pre> <p>In Windows, you can only install via Github release page, or build from source</p>"},{"location":"pages/install/#build-from-source","title":"Build from source:","text":"<p>Requirements:</p> <ul> <li>Python &gt;= <code>3.13</code> or above.</li> <li>Make &gt;= <code>4.4.1</code> or above if you wish build with <code>Makefile</code>.</li> <li>Git &gt;= <code>2.49.0</code> or above to clone Sephera source.</li> </ul> <p>1: Clone Sephera repo:</p> <pre><code>git clone https://github.com/reim-developer/Sephera &amp;&amp; cd Sephera\n</code></pre> <p>2: Install dependencies from requiremens.txt:</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>3: Now, you can build Sephera:</p> <ul> <li>If you wish build with <code>Make</code>, run this:</li> </ul> <pre><code>make build\n</code></pre> <ul> <li>Or you can build with Shell script (Linux or macOS):</li> </ul> <pre><code>chmod +x ./build.sh &amp;&amp; ./build.sh\n</code></pre> <ul> <li>You can also use Sephera without build:</li> </ul> <pre><code>python main.py help \n</code></pre>"},{"location":"pages/usage/","title":"Sephera Commands:","text":""},{"location":"pages/usage/#loc-command","title":"Loc Command","text":"<ul> <li>Description: Count lines of code in current directory.</li> </ul> <pre><code>sephera loc\n</code></pre> <p>Arguments:</p> <pre><code>--path\n</code></pre> <ul> <li>Description: Target directory you want Sephera to analyze. If the <code>--path</code> flag is not provided, it will count lines of code in current directory. This flag is optional.</li> </ul> <pre><code># Example usage:\nsephera loc --path ~/myProject # Linux/macOS\nsephera loc --path C:\\Document\\myProject # Windows\n</code></pre> <pre><code>--ignore\n</code></pre> <ul> <li>Description: Directory or file patterns to exclude from counting. You can use the <code>--ignore</code> flag multiple times. Supports both Glob and Regex. This flag is optional.</li> </ul> <pre><code>sephera loc --ignore \"*.py*\" # Ignore ALL Python files.\nsephera loc --ignore \"^.*\\.py$\" # Ignore ALL Python files with Regex.\nsephera loc --ignore \"node_module\" # Ignore ALL files, and folders in `node_modules`\nsephera loc --ignore \"*.py\" --ignore \"*.js\" # Use mutiple --ignore flags.\n</code></pre> <pre><code>--json\n</code></pre> <ul> <li>Description: Export result to a .json file. This flag is optional. If no filename is provided, it will default to SepheraExport.json.</li> </ul> <pre><code>sephera loc --json # Will export: SepheraExport.json\nsephera loc --json hello_sephera # Will export: hello_sephera.json\n</code></pre> <pre><code>--md\n</code></pre> <ul> <li>Description: Description: Export result to a .md file. This flag is optional. If no filename is provided, it will default to SepheraExport.md.</li> </ul> <pre><code>sephera loc --md # Will export: SepheraExport.md\nsephera loc --md hello_sephera # Will export: hello_sephera.md\n</code></pre>"},{"location":"pages/usage/#update-command","title":"Update Command","text":"<ul> <li>Description: Update Sephera to the latest version or install it to a different directory path.</li> </ul> <pre><code>sephera update\n</code></pre> <ul> <li>Note: When you use this command, if you're on the latest version of Sephera, it will redirect you to interactive mode, like this:</li> </ul> <pre><code>[!] You're using latest version of Sephera, do you want:\n[1] Re-install Sephera.\n[2] Install to another directory path.\n[3] Cancel and exit now.\nYour option [1-3]: \n</code></pre> <ul> <li>Otherwise, it will automatically update for you.</li> </ul>"},{"location":"pages/usage/#stats-command","title":"Stats Command","text":"<ul> <li>Description: Stats your project metadata, files and folders count, project size</li> </ul> <p>Arguments:</p> <pre><code>--path\n</code></pre> <ul> <li>Description: The target directory that you want Sephera to analyze. If the <code>--path</code> flag is not provided, it will default to the current directory. This flag is optional.</li> </ul> <pre><code># Example\nsephera stats --path ~/myProject # For Linux/macOS\nsephera stats --path C:\\users\\Document\\myProject # Windows\n</code></pre> <pre><code>--ignore\n</code></pre> <ul> <li>Description: Ignores directories or folders. If the --ignore flag is not provided, it will default to the current directory. It supports both regular expressions and exact file/folder names. This flag is optional.</li> </ul> <pre><code># Example\nsephera stats --ignore node_modules\n</code></pre> <pre><code>--chart\n</code></pre> <ul> <li>Description: Create chart for your stat overview. Default chart name is 'SepheraChart'.</li> </ul> <pre><code># Example:\nsephera stats --chart # Will export to default name, as SepheraChart\nsephera stats --chart myCustomizeChart # Will export to myCustomizeChart\n</code></pre>"},{"location":"pages/usage/#tree-command","title":"Tree Command","text":"<ul> <li>Description: Show your project structure.</li> </ul> <p>Arguments:</p> <pre><code>--path\n</code></pre> <ul> <li>Description: The target directory that you want Sephera to analyze. If the <code>--path</code> flag is not provided, it will default to the current directory. This flag is optional.</li> </ul> <pre><code># Example\nsephera tree --path ~/myProject # For Linux/macOS\nsephera tree --path C:\\users\\Document\\myProject # Windows\n</code></pre> <pre><code>--ignore\n</code></pre> <ul> <li>Description: Ignores directories or folders. If the --ignore flag is not provided, it will default to the current directory. It supports both regular expressions and exact file/folder names. This flag is optional.</li> </ul> <pre><code># Example\nsephera tree --ignore node_modules\n</code></pre> <pre><code>--chart\n</code></pre> <ul> <li>Description: Create chart for your stat overview. Default chart name is 'SepheraChart'.</li> </ul> <pre><code># Example:\nsephera tree --chart # Will export to default name, as SepheraChart\nsephera tree --chart myCustomizeChart # Will export to myCustomizeChart\n</code></pre>"},{"location":"pages/usage/#language-support-command","title":"Language Support Command","text":"<ul> <li>Description: Show the count of languages currently supported by Sephera.</li> </ul> <pre><code>sephera language-support\n</code></pre> <pre><code>--list\n</code></pre> <ul> <li>Description: Show the list of languages currently supported by Sephera.</li> </ul> <pre><code># Example and output:\nsephera language-support --list\n...\n[66] Eiffel\n[67] Pascal\n[68] TCL\n[69] Elixir\n[70] Markdown\n[71] M4\n[72] Kotlin Build Script\n[73] V Lang\n[+] Total language(s) supported by Sephera: 73\n[+] Sephera current version: 1.0.0\n</code></pre>"},{"location":"pages/usage/#version-command","title":"Version Command","text":"<ul> <li>Description: Show current or latest Sephera version from GitHub.</li> </ul> <pre><code>sephera version\n</code></pre> <pre><code>--git\n</code></pre> <ul> <li>Description: Show the latest version of Sephera from GitHub.</li> </ul> <pre><code># Example\nsephera version --git\n[+] The Sephera latest version on GitHub: 1.0.0\n[+] Your Sephera version: 1.0.0\n[+] You are use the latest version of Sephera\n</code></pre>"},{"location":"pages/usage/#cfg-language","title":"Cfg-language","text":"<ul> <li>Description: Set configuration language to your current directory.</li> </ul> <pre><code>sephera cfg-language\n</code></pre> <pre><code>--global\n</code></pre> <ul> <li>Description: Set Sephera configuration in your user home directory, e.g. ~/ or AppData/Local</li> </ul> <pre><code># Example for create global configuration.\nsephera cfg-language --global\n[+] Language detection configuration saved successfully.\n[+] Configuration path: /home/reim/.config/Sephera/SepheraCfg.yml\n</code></pre>"}]}